{
  // I want to use babel-eslint for parsing!
  "parser": "babel-eslint",

  "globals": {
    "angular": true,
    "inject": true,
    "Keycloak": true
  },

  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "jquery": true,
    "jasmine": true
  },

  "plugins": [
    'jasmine'
  ],

  "extends": ['plugin:jasmine/recommended'],

  "parserOptions": {
  	"ecmaVersion": 6,
  	"sourceType": "module",
  	"ecmaFeatures": {
    		"jsx": true,
    		"modules": true
    },
  },

  "rules": {
  	////////// Possible Errors //////////

  	// disallow assignment in conditional expressions
  	"no-cond-assign": 2,
  	// disallow duplicate keys when creating object literals
  	"no-dupe-keys": 2,
  	// disallow empty statements
  	"no-empty": 2,
  	// disallow unnecessary parentheses (off by default)
  	"no-extra-parens": 2,
  	// disallow unnecessary semicolons
  	"no-extra-semi": 2,
  	// disallow function or variable declarations in nested blocks
  	"no-inner-declarations": 2,
  	// disallow invalid regular expression strings in the RegExp constructor
  	"no-invalid-regexp": 2,
  	// disallow irregular whitespace outside of strings and comments
  	"no-irregular-whitespace": 2,
  	// disallow the use of object properties of the global object (Math and JSON) as functions
  	"no-obj-calls": 2,
  	// disallow reserved words being used as object literal keys (off by default)
  	"quote-props": [2, "always"],
  	// disallow unreachable statements after a return, throw, continue, or break statement
  	"no-unreachable": 2,

  	////////// Best Practices //////////

  	// specify curly brace conventions for all control statements
  	"curly": 2,
  	// require default case in switch statements (off by default)
  	"default-case": 2,
  	// require the use of === and !==
  	"eqeqeq": 2,
  	// disallow the use of alert, confirm, and prompt
  	"no-alert": 2,
  	// disallow use of arguments.caller or arguments.callee
  	"no-caller": 2,
  	// disallow use of labels for anything other then loops and switches
  	"no-labels": 2,
  	// disallow comparisons to null without a type-checking operator (off by default)
  	"no-eq-null": 2,
  	// disallow use of eval()
  	"no-eval": 2,
    // disallow use of eval()-like methods
  	"no-implied-eval": 2,
    // disallow creation of functions within loops
  	"no-loop-func": 2,
    // disallow use of multiple spaces
  	"no-multi-spaces": 2,
    // disallow use of assignment in return statement
  	"no-return-assign": 2,
    // disallow use of javascript: urls
  	"no-script-url": 2,
    // disallow comparisons where both sides are exactly the same (off by default)
  	"no-self-compare": 2,
    // disallow use of void operator (off by default)
  	"no-void": 0,
    // disallow use of the with statement
  	"no-with": 2,
    // require use of the second argument for parseInt() (off by default)
    "radix": 2,
    // require immediate function invocation to be wrapped in parentheses (off by default)
    "wrap-iife": [2, "inside"],

        ////////// Variables //////////

    // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-catch-shadow": 2,
    // disallow deletion of variables
    "no-delete-var": 2,
    // disallow labels that share a name with a variable
    "no-label-var": 2,
    // disallow declaration of variables already declared in the outer scope
    "no-shadow": 2,
    // disallow shadowing of names such as arguments
    "no-shadow-restricted-names": 2,
    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef": 2,
    // disallow use of undefined when initializing variables
    "no-undef-init": 2,
    // disallow use of variables before they are defined
    "no-use-before-define": 2,


    ////////// Stylistic Issues //////////

    // require camel case names
    "camelcase": 2,
    // require a capital letter for constructors
    "new-cap": 2,
    // disallow trailing whitespace at the end of lines
    "no-trailing-spaces": 1,
    // Check if semicolon is present
    "semi": [2, "always"]
  }
}
